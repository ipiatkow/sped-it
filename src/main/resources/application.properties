spring.application.name=sped-it
# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
#spring.datasource.url=jdbc:mysql://localhost:3306/my_database
#spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:5432/spedit
spring.datasource.url=${DATABASE_URL}
#

#spring.datasource.username=${DB_USER:postgres}
spring.datasource.username=
#spring.datasource.password=${DB_PASSWORD:40noemi20}
spring.datasource.password=
server.port=${PORT:8080}
#spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.default_schema=public
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
#spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# Dialekt JPA dla PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect